// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: machine.proto

package cloudv3

import (
	control "github.com/moby/buildkit/api/services/control"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterMachineResponse_Mount_FilesystemType int32

const (
	RegisterMachineResponse_Mount_FILESYSTEM_TYPE_UNSPECIFIED RegisterMachineResponse_Mount_FilesystemType = 0
	RegisterMachineResponse_Mount_FILESYSTEM_TYPE_EXT4        RegisterMachineResponse_Mount_FilesystemType = 1
	RegisterMachineResponse_Mount_FILESYSTEM_TYPE_XFS         RegisterMachineResponse_Mount_FilesystemType = 2
	RegisterMachineResponse_Mount_FILESYSTEM_TYPE_BTRFS       RegisterMachineResponse_Mount_FilesystemType = 3
)

// Enum value maps for RegisterMachineResponse_Mount_FilesystemType.
var (
	RegisterMachineResponse_Mount_FilesystemType_name = map[int32]string{
		0: "FILESYSTEM_TYPE_UNSPECIFIED",
		1: "FILESYSTEM_TYPE_EXT4",
		2: "FILESYSTEM_TYPE_XFS",
		3: "FILESYSTEM_TYPE_BTRFS",
	}
	RegisterMachineResponse_Mount_FilesystemType_value = map[string]int32{
		"FILESYSTEM_TYPE_UNSPECIFIED": 0,
		"FILESYSTEM_TYPE_EXT4":        1,
		"FILESYSTEM_TYPE_XFS":         2,
		"FILESYSTEM_TYPE_BTRFS":       3,
	}
)

func (x RegisterMachineResponse_Mount_FilesystemType) Enum() *RegisterMachineResponse_Mount_FilesystemType {
	p := new(RegisterMachineResponse_Mount_FilesystemType)
	*p = x
	return p
}

func (x RegisterMachineResponse_Mount_FilesystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterMachineResponse_Mount_FilesystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[0].Descriptor()
}

func (RegisterMachineResponse_Mount_FilesystemType) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[0]
}

func (x RegisterMachineResponse_Mount_FilesystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterMachineResponse_Mount_FilesystemType.Descriptor instead.
func (RegisterMachineResponse_Mount_FilesystemType) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 0, 0}
}

type RegisterMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Types that are assignable to Cloud:
	//
	//	*RegisterMachineRequest_Aws
	Cloud isRegisterMachineRequest_Cloud `protobuf_oneof:"cloud"`
}

func (x *RegisterMachineRequest) Reset() {
	*x = RegisterMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineRequest) ProtoMessage() {}

func (x *RegisterMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineRequest.ProtoReflect.Descriptor instead.
func (*RegisterMachineRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterMachineRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (m *RegisterMachineRequest) GetCloud() isRegisterMachineRequest_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (x *RegisterMachineRequest) GetAws() *RegisterMachineRequest_AWSRegistration {
	if x, ok := x.GetCloud().(*RegisterMachineRequest_Aws); ok {
		return x.Aws
	}
	return nil
}

type isRegisterMachineRequest_Cloud interface {
	isRegisterMachineRequest_Cloud()
}

type RegisterMachineRequest_Aws struct {
	Aws *RegisterMachineRequest_AWSRegistration `protobuf:"bytes,2,opt,name=aws,proto3,oneof"`
}

func (*RegisterMachineRequest_Aws) isRegisterMachineRequest_Cloud() {}

type RegisterMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId string `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are assignable to Task:
	//
	//	*RegisterMachineResponse_Pending
	//	*RegisterMachineResponse_Buildkit
	Task isRegisterMachineResponse_Task `protobuf_oneof:"task"`
}

func (x *RegisterMachineResponse) Reset() {
	*x = RegisterMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse) ProtoMessage() {}

func (x *RegisterMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterMachineResponse) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *RegisterMachineResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (m *RegisterMachineResponse) GetTask() isRegisterMachineResponse_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *RegisterMachineResponse) GetPending() *RegisterMachineResponse_PendingTask {
	if x, ok := x.GetTask().(*RegisterMachineResponse_Pending); ok {
		return x.Pending
	}
	return nil
}

func (x *RegisterMachineResponse) GetBuildkit() *RegisterMachineResponse_BuildKitTask {
	if x, ok := x.GetTask().(*RegisterMachineResponse_Buildkit); ok {
		return x.Buildkit
	}
	return nil
}

type isRegisterMachineResponse_Task interface {
	isRegisterMachineResponse_Task()
}

type RegisterMachineResponse_Pending struct {
	Pending *RegisterMachineResponse_PendingTask `protobuf:"bytes,3,opt,name=pending,proto3,oneof"`
}

type RegisterMachineResponse_Buildkit struct {
	Buildkit *RegisterMachineResponse_BuildKitTask `protobuf:"bytes,4,opt,name=buildkit,proto3,oneof"`
}

func (*RegisterMachineResponse_Pending) isRegisterMachineResponse_Task() {}

func (*RegisterMachineResponse_Buildkit) isRegisterMachineResponse_Task() {}

type PingMachineHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId string       `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	Disks     []*DiskSpace `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *PingMachineHealthRequest) Reset() {
	*x = PingMachineHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMachineHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMachineHealthRequest) ProtoMessage() {}

func (x *PingMachineHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMachineHealthRequest.ProtoReflect.Descriptor instead.
func (*PingMachineHealthRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{2}
}

func (x *PingMachineHealthRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *PingMachineHealthRequest) GetDisks() []*DiskSpace {
	if x != nil {
		return x.Disks
	}
	return nil
}

type DiskSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device      string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	FreeMb      int64  `protobuf:"varint,3,opt,name=free_mb,json=freeMb,proto3" json:"free_mb,omitempty"`
	TotalMb     int64  `protobuf:"varint,4,opt,name=total_mb,json=totalMb,proto3" json:"total_mb,omitempty"`
	FreeInodes  int64  `protobuf:"varint,5,opt,name=free_inodes,json=freeInodes,proto3" json:"free_inodes,omitempty"`
	TotalInodes int64  `protobuf:"varint,6,opt,name=total_inodes,json=totalInodes,proto3" json:"total_inodes,omitempty"`
}

func (x *DiskSpace) Reset() {
	*x = DiskSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSpace) ProtoMessage() {}

func (x *DiskSpace) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSpace.ProtoReflect.Descriptor instead.
func (*DiskSpace) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{3}
}

func (x *DiskSpace) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskSpace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DiskSpace) GetFreeMb() int64 {
	if x != nil {
		return x.FreeMb
	}
	return 0
}

func (x *DiskSpace) GetTotalMb() int64 {
	if x != nil {
		return x.TotalMb
	}
	return 0
}

func (x *DiskSpace) GetFreeInodes() int64 {
	if x != nil {
		return x.FreeInodes
	}
	return 0
}

func (x *DiskSpace) GetTotalInodes() int64 {
	if x != nil {
		return x.TotalInodes
	}
	return 0
}

type PingMachineHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldTerminate bool `protobuf:"varint,1,opt,name=should_terminate,json=shouldTerminate,proto3" json:"should_terminate,omitempty"`
}

func (x *PingMachineHealthResponse) Reset() {
	*x = PingMachineHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMachineHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMachineHealthResponse) ProtoMessage() {}

func (x *PingMachineHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMachineHealthResponse.ProtoReflect.Descriptor instead.
func (*PingMachineHealthResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{4}
}

func (x *PingMachineHealthResponse) GetShouldTerminate() bool {
	if x != nil {
		return x.ShouldTerminate
	}
	return false
}

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert string `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{5}
}

func (x *Cert) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *Cert) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId string `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	Cache     *Cache `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *UsageRequest) Reset() {
	*x = UsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageRequest) ProtoMessage() {}

func (x *UsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageRequest.ProtoReflect.Descriptor instead.
func (*UsageRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{6}
}

func (x *UsageRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *UsageRequest) GetCache() *Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

type Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response is the output of the `buildkit du` command.
	BuildkitDuJson string `protobuf:"bytes,1,opt,name=buildkit_du_json,json=buildkitDuJson,proto3" json:"buildkit_du_json,omitempty"`
}

func (x *Cache) Reset() {
	*x = Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{7}
}

func (x *Cache) GetBuildkitDuJson() string {
	if x != nil {
		return x.BuildkitDuJson
	}
	return ""
}

type UsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UsageResponse) Reset() {
	*x = UsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResponse) ProtoMessage() {}

func (x *UsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResponse.ProtoReflect.Descriptor instead.
func (*UsageResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{8}
}

type ReportStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId      string                  `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Status        *control.StatusResponse `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StableDigests map[string]string       `protobuf:"bytes,3,rep,name=stable_digests,json=stableDigests,proto3" json:"stable_digests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportStatusRequest) Reset() {
	*x = ReportStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusRequest) ProtoMessage() {}

func (x *ReportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusRequest.ProtoReflect.Descriptor instead.
func (*ReportStatusRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{9}
}

func (x *ReportStatusRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *ReportStatusRequest) GetStatus() *control.StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReportStatusRequest) GetStableDigests() map[string]string {
	if x != nil {
		return x.StableDigests
	}
	return nil
}

type ReportStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportStatusResponse) Reset() {
	*x = ReportStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusResponse) ProtoMessage() {}

func (x *ReportStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusResponse.ProtoReflect.Descriptor instead.
func (*ReportStatusResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{10}
}

type ReportSBOMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId string  `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Sboms    []*SBOM `protobuf:"bytes,2,rep,name=sboms,proto3" json:"sboms,omitempty"`
}

func (x *ReportSBOMRequest) Reset() {
	*x = ReportSBOMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSBOMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSBOMRequest) ProtoMessage() {}

func (x *ReportSBOMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSBOMRequest.ProtoReflect.Descriptor instead.
func (*ReportSBOMRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{11}
}

func (x *ReportSBOMRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *ReportSBOMRequest) GetSboms() []*SBOM {
	if x != nil {
		return x.Sboms
	}
	return nil
}

type SBOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	SpdxJson string `protobuf:"bytes,2,opt,name=spdx_json,json=spdxJson,proto3" json:"spdx_json,omitempty"`
	Digest   string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// If the build was exported to an image the image name and digest are included.
	Image *Image `protobuf:"bytes,4,opt,name=image,proto3,oneof" json:"image,omitempty"`
}

func (x *SBOM) Reset() {
	*x = SBOM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBOM) ProtoMessage() {}

func (x *SBOM) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBOM.ProtoReflect.Descriptor instead.
func (*SBOM) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{12}
}

func (x *SBOM) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SBOM) GetSpdxJson() string {
	if x != nil {
		return x.SpdxJson
	}
	return ""
}

func (x *SBOM) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *SBOM) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the image name and tag.
	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ManifestDigest string `protobuf:"bytes,2,opt,name=manifest_digest,json=manifestDigest,proto3" json:"manifest_digest,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{13}
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetManifestDigest() string {
	if x != nil {
		return x.ManifestDigest
	}
	return ""
}

type ReportSBOMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportSBOMResponse) Reset() {
	*x = ReportSBOMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSBOMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSBOMResponse) ProtoMessage() {}

func (x *ReportSBOMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSBOMResponse.ProtoReflect.Descriptor instead.
func (*ReportSBOMResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{14}
}

type ReportBuildContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId   string      `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Dockerfile *Dockerfile `protobuf:"bytes,2,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
}

func (x *ReportBuildContextRequest) Reset() {
	*x = ReportBuildContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBuildContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBuildContextRequest) ProtoMessage() {}

func (x *ReportBuildContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBuildContextRequest.ProtoReflect.Descriptor instead.
func (*ReportBuildContextRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{15}
}

func (x *ReportBuildContextRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *ReportBuildContextRequest) GetDockerfile() *Dockerfile {
	if x != nil {
		return x.Dockerfile
	}
	return nil
}

type Dockerfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Contents string `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Dockerfile) Reset() {
	*x = Dockerfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dockerfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dockerfile) ProtoMessage() {}

func (x *Dockerfile) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dockerfile.ProtoReflect.Descriptor instead.
func (*Dockerfile) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{16}
}

func (x *Dockerfile) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Dockerfile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Dockerfile) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type ReportBuildContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportBuildContextResponse) Reset() {
	*x = ReportBuildContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBuildContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBuildContextResponse) ProtoMessage() {}

func (x *ReportBuildContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBuildContextResponse.ProtoReflect.Descriptor instead.
func (*ReportBuildContextResponse) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{17}
}

type RegisterMachineRequest_AWSRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document  string `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RegisterMachineRequest_AWSRegistration) Reset() {
	*x = RegisterMachineRequest_AWSRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineRequest_AWSRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineRequest_AWSRegistration) ProtoMessage() {}

func (x *RegisterMachineRequest_AWSRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineRequest_AWSRegistration.ProtoReflect.Descriptor instead.
func (*RegisterMachineRequest_AWSRegistration) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RegisterMachineRequest_AWSRegistration) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *RegisterMachineRequest_AWSRegistration) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type RegisterMachineResponse_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string                                       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Device     string                                       `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	FsType     RegisterMachineResponse_Mount_FilesystemType `protobuf:"varint,3,opt,name=fs_type,json=fsType,proto3,enum=depot.cloud.v3.RegisterMachineResponse_Mount_FilesystemType" json:"fs_type,omitempty"`
	CephVolume *RegisterMachineResponse_Mount_CephVolume    `protobuf:"bytes,4,opt,name=ceph_volume,json=cephVolume,proto3,oneof" json:"ceph_volume,omitempty"`
	Options    *string                                      `protobuf:"bytes,5,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *RegisterMachineResponse_Mount) Reset() {
	*x = RegisterMachineResponse_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse_Mount) ProtoMessage() {}

func (x *RegisterMachineResponse_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse_Mount.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse_Mount) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RegisterMachineResponse_Mount) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegisterMachineResponse_Mount) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *RegisterMachineResponse_Mount) GetFsType() RegisterMachineResponse_Mount_FilesystemType {
	if x != nil {
		return x.FsType
	}
	return RegisterMachineResponse_Mount_FILESYSTEM_TYPE_UNSPECIFIED
}

func (x *RegisterMachineResponse_Mount) GetCephVolume() *RegisterMachineResponse_Mount_CephVolume {
	if x != nil {
		return x.CephVolume
	}
	return nil
}

func (x *RegisterMachineResponse_Mount) GetOptions() string {
	if x != nil && x.Options != nil {
		return *x.Options
	}
	return ""
}

// PendingTask represents an instruction to wait for a task to be assigned
type RegisterMachineResponse_PendingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterMachineResponse_PendingTask) Reset() {
	*x = RegisterMachineResponse_PendingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse_PendingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse_PendingTask) ProtoMessage() {}

func (x *RegisterMachineResponse_PendingTask) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse_PendingTask.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse_PendingTask) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 1}
}

// BuildkitTask represents an instruction to start a buildkit daemon
type RegisterMachineResponse_BuildKitTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName           string                            `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Cert                 *Cert                             `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	CaCert               *Cert                             `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Mounts               []*RegisterMachineResponse_Mount  `protobuf:"bytes,4,rep,name=mounts,proto3" json:"mounts,omitempty"`
	CacheSize            int32                             `protobuf:"varint,5,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	TraceEndpoint        *string                           `protobuf:"bytes,6,opt,name=trace_endpoint,json=traceEndpoint,proto3,oneof" json:"trace_endpoint,omitempty"`
	Profiler             *RegisterMachineResponse_Profiler `protobuf:"bytes,7,opt,name=profiler,proto3,oneof" json:"profiler,omitempty"`
	DisableParallelGzip  *bool                             `protobuf:"varint,8,opt,name=disable_parallel_gzip,json=disableParallelGzip,proto3,oneof" json:"disable_parallel_gzip,omitempty"`
	RunGcBeforeStart     *bool                             `protobuf:"varint,9,opt,name=run_gc_before_start,json=runGcBeforeStart,proto3,oneof" json:"run_gc_before_start,omitempty"`
	EnableSchedulerDebug *bool                             `protobuf:"varint,11,opt,name=enable_scheduler_debug,json=enableSchedulerDebug,proto3,oneof" json:"enable_scheduler_debug,omitempty"`
	// Turns off merging feature of buildkit.  Attempting to help GDC.
	DisableMergeTo *bool `protobuf:"varint,12,opt,name=disable_merge_to,json=disableMergeTo,proto3,oneof" json:"disable_merge_to,omitempty"`
	MaxParallelism int32 `protobuf:"varint,13,opt,name=max_parallelism,json=maxParallelism,proto3" json:"max_parallelism,omitempty"`
	// Disable fstrim on shutdown
	DisableFstrim *bool `protobuf:"varint,14,opt,name=disable_fstrim,json=disableFstrim,proto3,oneof" json:"disable_fstrim,omitempty"`
	// Number of concurrent fetchers/pushers per domain name
	ResolverConcurrency *int32 `protobuf:"varint,15,opt,name=resolver_concurrency,json=resolverConcurrency,proto3,oneof" json:"resolver_concurrency,omitempty"`
	// Enable buildkit debug logging
	EnableDebugLogging *bool `protobuf:"varint,16,opt,name=enable_debug_logging,json=enableDebugLogging,proto3,oneof" json:"enable_debug_logging,omitempty"`
}

func (x *RegisterMachineResponse_BuildKitTask) Reset() {
	*x = RegisterMachineResponse_BuildKitTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse_BuildKitTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse_BuildKitTask) ProtoMessage() {}

func (x *RegisterMachineResponse_BuildKitTask) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse_BuildKitTask.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse_BuildKitTask) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 2}
}

func (x *RegisterMachineResponse_BuildKitTask) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *RegisterMachineResponse_BuildKitTask) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *RegisterMachineResponse_BuildKitTask) GetCaCert() *Cert {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *RegisterMachineResponse_BuildKitTask) GetMounts() []*RegisterMachineResponse_Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *RegisterMachineResponse_BuildKitTask) GetCacheSize() int32 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *RegisterMachineResponse_BuildKitTask) GetTraceEndpoint() string {
	if x != nil && x.TraceEndpoint != nil {
		return *x.TraceEndpoint
	}
	return ""
}

func (x *RegisterMachineResponse_BuildKitTask) GetProfiler() *RegisterMachineResponse_Profiler {
	if x != nil {
		return x.Profiler
	}
	return nil
}

func (x *RegisterMachineResponse_BuildKitTask) GetDisableParallelGzip() bool {
	if x != nil && x.DisableParallelGzip != nil {
		return *x.DisableParallelGzip
	}
	return false
}

func (x *RegisterMachineResponse_BuildKitTask) GetRunGcBeforeStart() bool {
	if x != nil && x.RunGcBeforeStart != nil {
		return *x.RunGcBeforeStart
	}
	return false
}

func (x *RegisterMachineResponse_BuildKitTask) GetEnableSchedulerDebug() bool {
	if x != nil && x.EnableSchedulerDebug != nil {
		return *x.EnableSchedulerDebug
	}
	return false
}

func (x *RegisterMachineResponse_BuildKitTask) GetDisableMergeTo() bool {
	if x != nil && x.DisableMergeTo != nil {
		return *x.DisableMergeTo
	}
	return false
}

func (x *RegisterMachineResponse_BuildKitTask) GetMaxParallelism() int32 {
	if x != nil {
		return x.MaxParallelism
	}
	return 0
}

func (x *RegisterMachineResponse_BuildKitTask) GetDisableFstrim() bool {
	if x != nil && x.DisableFstrim != nil {
		return *x.DisableFstrim
	}
	return false
}

func (x *RegisterMachineResponse_BuildKitTask) GetResolverConcurrency() int32 {
	if x != nil && x.ResolverConcurrency != nil {
		return *x.ResolverConcurrency
	}
	return 0
}

func (x *RegisterMachineResponse_BuildKitTask) GetEnableDebugLogging() bool {
	if x != nil && x.EnableDebugLogging != nil {
		return *x.EnableDebugLogging
	}
	return false
}

// Specifies sending buildkit profiling data to a remote endpoint.
type RegisterMachineResponse_Profiler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint  string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *RegisterMachineResponse_Profiler) Reset() {
	*x = RegisterMachineResponse_Profiler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse_Profiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse_Profiler) ProtoMessage() {}

func (x *RegisterMachineResponse_Profiler) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse_Profiler.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse_Profiler) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 3}
}

func (x *RegisterMachineResponse_Profiler) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterMachineResponse_Profiler) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterMachineResponse_Profiler) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// rbd device map rbd/{volume_name}/{volume_name} --name {client_name} --keyring /etc/ceph/ceph.{client_name}.keyring
type RegisterMachineResponse_Mount_CephVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used as the namespace and image name.
	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Includes `client.` prefix
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Store securely. NOTE: this is not a keyring file but just a key.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Store at /etc/ceph/ceph.conf
	CephConf string `protobuf:"bytes,4,opt,name=ceph_conf,json=cephConf,proto3" json:"ceph_conf,omitempty"`
}

func (x *RegisterMachineResponse_Mount_CephVolume) Reset() {
	*x = RegisterMachineResponse_Mount_CephVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMachineResponse_Mount_CephVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMachineResponse_Mount_CephVolume) ProtoMessage() {}

func (x *RegisterMachineResponse_Mount_CephVolume) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMachineResponse_Mount_CephVolume.ProtoReflect.Descriptor instead.
func (*RegisterMachineResponse_Mount_CephVolume) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *RegisterMachineResponse_Mount_CephVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *RegisterMachineResponse_Mount_CephVolume) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *RegisterMachineResponse_Mount_CephVolume) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RegisterMachineResponse_Mount_CephVolume) GetCephConf() string {
	if x != nil {
		return x.CephConf
	}
	return ""
}

var File_machine_proto protoreflect.FileDescriptor

var file_machine_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x1a,
	0x1e, 0x6d, 0x6f, 0x62, 0x79, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x1a, 0x4b, 0x0a, 0x0f, 0x41,
	0x57, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x22, 0xe7, 0x0e, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4b, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x1a, 0xa5, 0x04, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x07, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x65, 0x70, 0x68, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x65, 0x70, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x1a, 0x7d, 0x0a, 0x0a, 0x43, 0x65, 0x70, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x70, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x70, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0x7f, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x34, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x58, 0x46, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54, 0x52, 0x46,
	0x53, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x65, 0x70, 0x68, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x0d, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0xd5,
	0x07, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x61,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65,
	0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x5f, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x47, 0x7a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x5f, 0x67,
	0x63, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x47, 0x63, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x14, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x2a,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x67,
	0x7a, 0x69, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x67, 0x63, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x1a, 0x5b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x6a, 0x0a, 0x18, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x19, 0x50, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x22, 0x2c, 0x0a, 0x04, 0x43, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x5a, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x31, 0x0a, 0x05, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74,
	0x5f, 0x64, 0x75, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x44, 0x75, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x0f,
	0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8d, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66,
	0x66, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x62, 0x79, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x6b, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x42, 0x4f, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x62, 0x6f,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x42, 0x4f, 0x4d, 0x52, 0x05,
	0x73, 0x62, 0x6f, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x53, 0x42, 0x4f, 0x4d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x64, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x64, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x42, 0x4f, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5c, 0x0a,
	0x0a, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc5, 0x04, 0x0a, 0x0e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x26, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x68, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12,
	0x53, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x42, 0x4f, 0x4d, 0x12, 0x21, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x42, 0x4f, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x42, 0x4f, 0x4d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0xa8, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x33, 0x42, 0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x62, 0x79, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6b,
	0x69, 0x74, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x76, 0x33, 0xa2, 0x02, 0x03, 0x44, 0x43, 0x58, 0xaa, 0x02, 0x0e, 0x44, 0x65, 0x70,
	0x6f, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x33, 0xca, 0x02, 0x0e, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x33, 0xe2, 0x02, 0x1a, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x44, 0x65, 0x70, 0x6f,
	0x74, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_machine_proto_rawDescOnce sync.Once
	file_machine_proto_rawDescData = file_machine_proto_rawDesc
)

func file_machine_proto_rawDescGZIP() []byte {
	file_machine_proto_rawDescOnce.Do(func() {
		file_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_machine_proto_rawDescData)
	})
	return file_machine_proto_rawDescData
}

var file_machine_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_machine_proto_goTypes = []interface{}{
	(RegisterMachineResponse_Mount_FilesystemType)(0), // 0: depot.cloud.v3.RegisterMachineResponse.Mount.FilesystemType
	(*RegisterMachineRequest)(nil),                    // 1: depot.cloud.v3.RegisterMachineRequest
	(*RegisterMachineResponse)(nil),                   // 2: depot.cloud.v3.RegisterMachineResponse
	(*PingMachineHealthRequest)(nil),                  // 3: depot.cloud.v3.PingMachineHealthRequest
	(*DiskSpace)(nil),                                 // 4: depot.cloud.v3.DiskSpace
	(*PingMachineHealthResponse)(nil),                 // 5: depot.cloud.v3.PingMachineHealthResponse
	(*Cert)(nil),                                      // 6: depot.cloud.v3.Cert
	(*UsageRequest)(nil),                              // 7: depot.cloud.v3.UsageRequest
	(*Cache)(nil),                                     // 8: depot.cloud.v3.Cache
	(*UsageResponse)(nil),                             // 9: depot.cloud.v3.UsageResponse
	(*ReportStatusRequest)(nil),                       // 10: depot.cloud.v3.ReportStatusRequest
	(*ReportStatusResponse)(nil),                      // 11: depot.cloud.v3.ReportStatusResponse
	(*ReportSBOMRequest)(nil),                         // 12: depot.cloud.v3.ReportSBOMRequest
	(*SBOM)(nil),                                      // 13: depot.cloud.v3.SBOM
	(*Image)(nil),                                     // 14: depot.cloud.v3.Image
	(*ReportSBOMResponse)(nil),                        // 15: depot.cloud.v3.ReportSBOMResponse
	(*ReportBuildContextRequest)(nil),                 // 16: depot.cloud.v3.ReportBuildContextRequest
	(*Dockerfile)(nil),                                // 17: depot.cloud.v3.Dockerfile
	(*ReportBuildContextResponse)(nil),                // 18: depot.cloud.v3.ReportBuildContextResponse
	(*RegisterMachineRequest_AWSRegistration)(nil),    // 19: depot.cloud.v3.RegisterMachineRequest.AWSRegistration
	(*RegisterMachineResponse_Mount)(nil),             // 20: depot.cloud.v3.RegisterMachineResponse.Mount
	(*RegisterMachineResponse_PendingTask)(nil),       // 21: depot.cloud.v3.RegisterMachineResponse.PendingTask
	(*RegisterMachineResponse_BuildKitTask)(nil),      // 22: depot.cloud.v3.RegisterMachineResponse.BuildKitTask
	(*RegisterMachineResponse_Profiler)(nil),          // 23: depot.cloud.v3.RegisterMachineResponse.Profiler
	(*RegisterMachineResponse_Mount_CephVolume)(nil),  // 24: depot.cloud.v3.RegisterMachineResponse.Mount.CephVolume
	nil,                            // 25: depot.cloud.v3.ReportStatusRequest.StableDigestsEntry
	(*control.StatusResponse)(nil), // 26: moby.buildkit.v1.StatusResponse
}
var file_machine_proto_depIdxs = []int32{
	19, // 0: depot.cloud.v3.RegisterMachineRequest.aws:type_name -> depot.cloud.v3.RegisterMachineRequest.AWSRegistration
	21, // 1: depot.cloud.v3.RegisterMachineResponse.pending:type_name -> depot.cloud.v3.RegisterMachineResponse.PendingTask
	22, // 2: depot.cloud.v3.RegisterMachineResponse.buildkit:type_name -> depot.cloud.v3.RegisterMachineResponse.BuildKitTask
	4,  // 3: depot.cloud.v3.PingMachineHealthRequest.disks:type_name -> depot.cloud.v3.DiskSpace
	8,  // 4: depot.cloud.v3.UsageRequest.cache:type_name -> depot.cloud.v3.Cache
	26, // 5: depot.cloud.v3.ReportStatusRequest.status:type_name -> moby.buildkit.v1.StatusResponse
	25, // 6: depot.cloud.v3.ReportStatusRequest.stable_digests:type_name -> depot.cloud.v3.ReportStatusRequest.StableDigestsEntry
	13, // 7: depot.cloud.v3.ReportSBOMRequest.sboms:type_name -> depot.cloud.v3.SBOM
	14, // 8: depot.cloud.v3.SBOM.image:type_name -> depot.cloud.v3.Image
	17, // 9: depot.cloud.v3.ReportBuildContextRequest.dockerfile:type_name -> depot.cloud.v3.Dockerfile
	0,  // 10: depot.cloud.v3.RegisterMachineResponse.Mount.fs_type:type_name -> depot.cloud.v3.RegisterMachineResponse.Mount.FilesystemType
	24, // 11: depot.cloud.v3.RegisterMachineResponse.Mount.ceph_volume:type_name -> depot.cloud.v3.RegisterMachineResponse.Mount.CephVolume
	6,  // 12: depot.cloud.v3.RegisterMachineResponse.BuildKitTask.cert:type_name -> depot.cloud.v3.Cert
	6,  // 13: depot.cloud.v3.RegisterMachineResponse.BuildKitTask.ca_cert:type_name -> depot.cloud.v3.Cert
	20, // 14: depot.cloud.v3.RegisterMachineResponse.BuildKitTask.mounts:type_name -> depot.cloud.v3.RegisterMachineResponse.Mount
	23, // 15: depot.cloud.v3.RegisterMachineResponse.BuildKitTask.profiler:type_name -> depot.cloud.v3.RegisterMachineResponse.Profiler
	1,  // 16: depot.cloud.v3.MachineService.RegisterMachine:input_type -> depot.cloud.v3.RegisterMachineRequest
	3,  // 17: depot.cloud.v3.MachineService.PingMachineHealth:input_type -> depot.cloud.v3.PingMachineHealthRequest
	7,  // 18: depot.cloud.v3.MachineService.Usage:input_type -> depot.cloud.v3.UsageRequest
	10, // 19: depot.cloud.v3.MachineService.ReportStatus:input_type -> depot.cloud.v3.ReportStatusRequest
	12, // 20: depot.cloud.v3.MachineService.ReportSBOM:input_type -> depot.cloud.v3.ReportSBOMRequest
	16, // 21: depot.cloud.v3.MachineService.ReportBuildContext:input_type -> depot.cloud.v3.ReportBuildContextRequest
	2,  // 22: depot.cloud.v3.MachineService.RegisterMachine:output_type -> depot.cloud.v3.RegisterMachineResponse
	5,  // 23: depot.cloud.v3.MachineService.PingMachineHealth:output_type -> depot.cloud.v3.PingMachineHealthResponse
	9,  // 24: depot.cloud.v3.MachineService.Usage:output_type -> depot.cloud.v3.UsageResponse
	11, // 25: depot.cloud.v3.MachineService.ReportStatus:output_type -> depot.cloud.v3.ReportStatusResponse
	15, // 26: depot.cloud.v3.MachineService.ReportSBOM:output_type -> depot.cloud.v3.ReportSBOMResponse
	18, // 27: depot.cloud.v3.MachineService.ReportBuildContext:output_type -> depot.cloud.v3.ReportBuildContextResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_machine_proto_init() }
func file_machine_proto_init() {
	if File_machine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMachineHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMachineHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSBOMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBOM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSBOMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBuildContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dockerfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBuildContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineRequest_AWSRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse_PendingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse_BuildKitTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse_Profiler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMachineResponse_Mount_CephVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_machine_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RegisterMachineRequest_Aws)(nil),
	}
	file_machine_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RegisterMachineResponse_Pending)(nil),
		(*RegisterMachineResponse_Buildkit)(nil),
	}
	file_machine_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_machine_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_machine_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machine_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_machine_proto_goTypes,
		DependencyIndexes: file_machine_proto_depIdxs,
		EnumInfos:         file_machine_proto_enumTypes,
		MessageInfos:      file_machine_proto_msgTypes,
	}.Build()
	File_machine_proto = out.File
	file_machine_proto_rawDesc = nil
	file_machine_proto_goTypes = nil
	file_machine_proto_depIdxs = nil
}
