// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: machine.proto

package cloudv3connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	api "github.com/moby/buildkit/depot/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "depot.cloud.v3.MachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineServiceRegisterMachineProcedure is the fully-qualified name of the MachineService's
	// RegisterMachine RPC.
	MachineServiceRegisterMachineProcedure = "/depot.cloud.v3.MachineService/RegisterMachine"
	// MachineServicePingMachineHealthProcedure is the fully-qualified name of the MachineService's
	// PingMachineHealth RPC.
	MachineServicePingMachineHealthProcedure = "/depot.cloud.v3.MachineService/PingMachineHealth"
	// MachineServiceUsageProcedure is the fully-qualified name of the MachineService's Usage RPC.
	MachineServiceUsageProcedure = "/depot.cloud.v3.MachineService/Usage"
	// MachineServiceReportStatusProcedure is the fully-qualified name of the MachineService's
	// ReportStatus RPC.
	MachineServiceReportStatusProcedure = "/depot.cloud.v3.MachineService/ReportStatus"
)

// MachineServiceClient is a client for the depot.cloud.v3.MachineService service.
type MachineServiceClient interface {
	RegisterMachine(context.Context, *connect_go.Request[api.RegisterMachineRequest]) (*connect_go.ServerStreamForClient[api.RegisterMachineResponse], error)
	PingMachineHealth(context.Context, *connect_go.Request[api.PingMachineHealthRequest]) (*connect_go.Response[api.PingMachineHealthResponse], error)
	Usage(context.Context, *connect_go.Request[api.UsageRequest]) (*connect_go.Response[api.UsageResponse], error)
	ReportStatus(context.Context) *connect_go.ClientStreamForClient[api.ReportStatusRequest, api.ReportStatusResponse]
}

// NewMachineServiceClient constructs a client for the depot.cloud.v3.MachineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &machineServiceClient{
		registerMachine: connect_go.NewClient[api.RegisterMachineRequest, api.RegisterMachineResponse](
			httpClient,
			baseURL+MachineServiceRegisterMachineProcedure,
			opts...,
		),
		pingMachineHealth: connect_go.NewClient[api.PingMachineHealthRequest, api.PingMachineHealthResponse](
			httpClient,
			baseURL+MachineServicePingMachineHealthProcedure,
			opts...,
		),
		usage: connect_go.NewClient[api.UsageRequest, api.UsageResponse](
			httpClient,
			baseURL+MachineServiceUsageProcedure,
			opts...,
		),
		reportStatus: connect_go.NewClient[api.ReportStatusRequest, api.ReportStatusResponse](
			httpClient,
			baseURL+MachineServiceReportStatusProcedure,
			opts...,
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	registerMachine   *connect_go.Client[api.RegisterMachineRequest, api.RegisterMachineResponse]
	pingMachineHealth *connect_go.Client[api.PingMachineHealthRequest, api.PingMachineHealthResponse]
	usage             *connect_go.Client[api.UsageRequest, api.UsageResponse]
	reportStatus      *connect_go.Client[api.ReportStatusRequest, api.ReportStatusResponse]
}

// RegisterMachine calls depot.cloud.v3.MachineService.RegisterMachine.
func (c *machineServiceClient) RegisterMachine(ctx context.Context, req *connect_go.Request[api.RegisterMachineRequest]) (*connect_go.ServerStreamForClient[api.RegisterMachineResponse], error) {
	return c.registerMachine.CallServerStream(ctx, req)
}

// PingMachineHealth calls depot.cloud.v3.MachineService.PingMachineHealth.
func (c *machineServiceClient) PingMachineHealth(ctx context.Context, req *connect_go.Request[api.PingMachineHealthRequest]) (*connect_go.Response[api.PingMachineHealthResponse], error) {
	return c.pingMachineHealth.CallUnary(ctx, req)
}

// Usage calls depot.cloud.v3.MachineService.Usage.
func (c *machineServiceClient) Usage(ctx context.Context, req *connect_go.Request[api.UsageRequest]) (*connect_go.Response[api.UsageResponse], error) {
	return c.usage.CallUnary(ctx, req)
}

// ReportStatus calls depot.cloud.v3.MachineService.ReportStatus.
func (c *machineServiceClient) ReportStatus(ctx context.Context) *connect_go.ClientStreamForClient[api.ReportStatusRequest, api.ReportStatusResponse] {
	return c.reportStatus.CallClientStream(ctx)
}

// MachineServiceHandler is an implementation of the depot.cloud.v3.MachineService service.
type MachineServiceHandler interface {
	RegisterMachine(context.Context, *connect_go.Request[api.RegisterMachineRequest], *connect_go.ServerStream[api.RegisterMachineResponse]) error
	PingMachineHealth(context.Context, *connect_go.Request[api.PingMachineHealthRequest]) (*connect_go.Response[api.PingMachineHealthResponse], error)
	Usage(context.Context, *connect_go.Request[api.UsageRequest]) (*connect_go.Response[api.UsageResponse], error)
	ReportStatus(context.Context, *connect_go.ClientStream[api.ReportStatusRequest]) (*connect_go.Response[api.ReportStatusResponse], error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MachineServiceRegisterMachineProcedure, connect_go.NewServerStreamHandler(
		MachineServiceRegisterMachineProcedure,
		svc.RegisterMachine,
		opts...,
	))
	mux.Handle(MachineServicePingMachineHealthProcedure, connect_go.NewUnaryHandler(
		MachineServicePingMachineHealthProcedure,
		svc.PingMachineHealth,
		opts...,
	))
	mux.Handle(MachineServiceUsageProcedure, connect_go.NewUnaryHandler(
		MachineServiceUsageProcedure,
		svc.Usage,
		opts...,
	))
	mux.Handle(MachineServiceReportStatusProcedure, connect_go.NewClientStreamHandler(
		MachineServiceReportStatusProcedure,
		svc.ReportStatus,
		opts...,
	))
	return "/depot.cloud.v3.MachineService/", mux
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) RegisterMachine(context.Context, *connect_go.Request[api.RegisterMachineRequest], *connect_go.ServerStream[api.RegisterMachineResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v3.MachineService.RegisterMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) PingMachineHealth(context.Context, *connect_go.Request[api.PingMachineHealthRequest]) (*connect_go.Response[api.PingMachineHealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v3.MachineService.PingMachineHealth is not implemented"))
}

func (UnimplementedMachineServiceHandler) Usage(context.Context, *connect_go.Request[api.UsageRequest]) (*connect_go.Response[api.UsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v3.MachineService.Usage is not implemented"))
}

func (UnimplementedMachineServiceHandler) ReportStatus(context.Context, *connect_go.ClientStream[api.ReportStatusRequest]) (*connect_go.Response[api.ReportStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v3.MachineService.ReportStatus is not implemented"))
}
